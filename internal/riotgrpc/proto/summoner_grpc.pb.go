// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: internal/riotgrpc/proto/summoner.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SummonerQueryClient is the client API for SummonerQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummonerQueryClient interface {
	ByName(ctx context.Context, in *SummonerByNameRequest, opts ...grpc.CallOption) (*SummonerResponse, error)
	ByPuuid(ctx context.Context, in *SummonerByPuuidRequest, opts ...grpc.CallOption) (*SummonerResponse, error)
}

type summonerQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewSummonerQueryClient(cc grpc.ClientConnInterface) SummonerQueryClient {
	return &summonerQueryClient{cc}
}

func (c *summonerQueryClient) ByName(ctx context.Context, in *SummonerByNameRequest, opts ...grpc.CallOption) (*SummonerResponse, error) {
	out := new(SummonerResponse)
	err := c.cc.Invoke(ctx, "/SummonerQuery/ByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summonerQueryClient) ByPuuid(ctx context.Context, in *SummonerByPuuidRequest, opts ...grpc.CallOption) (*SummonerResponse, error) {
	out := new(SummonerResponse)
	err := c.cc.Invoke(ctx, "/SummonerQuery/ByPuuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummonerQueryServer is the server API for SummonerQuery service.
// All implementations must embed UnimplementedSummonerQueryServer
// for forward compatibility
type SummonerQueryServer interface {
	ByName(context.Context, *SummonerByNameRequest) (*SummonerResponse, error)
	ByPuuid(context.Context, *SummonerByPuuidRequest) (*SummonerResponse, error)
	mustEmbedUnimplementedSummonerQueryServer()
}

// UnimplementedSummonerQueryServer must be embedded to have forward compatible implementations.
type UnimplementedSummonerQueryServer struct {
}

func (UnimplementedSummonerQueryServer) ByName(context.Context, *SummonerByNameRequest) (*SummonerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByName not implemented")
}
func (UnimplementedSummonerQueryServer) ByPuuid(context.Context, *SummonerByPuuidRequest) (*SummonerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByPuuid not implemented")
}
func (UnimplementedSummonerQueryServer) mustEmbedUnimplementedSummonerQueryServer() {}

// UnsafeSummonerQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummonerQueryServer will
// result in compilation errors.
type UnsafeSummonerQueryServer interface {
	mustEmbedUnimplementedSummonerQueryServer()
}

func RegisterSummonerQueryServer(s grpc.ServiceRegistrar, srv SummonerQueryServer) {
	s.RegisterService(&SummonerQuery_ServiceDesc, srv)
}

func _SummonerQuery_ByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummonerByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummonerQueryServer).ByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SummonerQuery/ByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummonerQueryServer).ByName(ctx, req.(*SummonerByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummonerQuery_ByPuuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummonerByPuuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummonerQueryServer).ByPuuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SummonerQuery/ByPuuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummonerQueryServer).ByPuuid(ctx, req.(*SummonerByPuuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SummonerQuery_ServiceDesc is the grpc.ServiceDesc for SummonerQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummonerQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SummonerQuery",
	HandlerType: (*SummonerQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ByName",
			Handler:    _SummonerQuery_ByName_Handler,
		},
		{
			MethodName: "ByPuuid",
			Handler:    _SummonerQuery_ByPuuid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/riotgrpc/proto/summoner.proto",
}
